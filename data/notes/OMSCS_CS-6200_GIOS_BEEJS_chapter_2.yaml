subject_metadata:
  category: OMSCS
  ident: CS 6200
  abbreviation: GIOS
  name: Graduate Introduction to Operating Systems
note_metadata:
  source_name: Beej's Guide to Network Programming
  source_reference: https://beej.us/guide/bgnet/pdf/bgnet_usl_c_1.pdf
  tags:
  - systems
  - c
  - networking
  - beejs
  - chapter2
notes:
- term: What is a `socket`?
  definition: A **way to speak to other programs** using standard Unix **file descriptors**.
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2
  uuid: dc72f7be-cdba-4fb8-adcb-94caa3271ce0
- term: What is a `file descriptor`?
  definition: |
    An **integer** associated with an **open file**.
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2
  uuid: f7843213-7fc0-4dd0-a37d-583cf894dc62
- question: What are `file descriptors` used for and what types of things can be file descriptors?
  answer: |
    When Unix programs do any sort of **I/O**, they do it by reading or writing to a **file descriptor**. That file can be a **network connection**, a **FIFO**, a **pipe**, a **terminal**, a real on-the-disk **file**, or just about anything else. **Everything in Unix is a file**.
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2
  uuid: eca76ae6-8bc2-4962-8be1-ce4b933d3fa5
- question: What are the two types of sockets?
  answer: |
    One is `Stream` Sockets; the other is `Datagram` Sockets, which may hereafter be referred to as `SOCK_STREAM` and `SOCK_DGRAM`, respectively.

    **Datagram** sockets are sometimes called **connectionless sockets**. (Though they can be `connect()`'d if you really want.)
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  uuid: d77192be-688b-4f8f-a62e-f7941115efa7
- term: What are `stream` sockets?
  definition: |
    Stream sockets are **reliable** **two-way** **connected communication streams**. If you output two items into the socket in the order “1, 2”, they will arrive in the order “1, 2” at the opposite end. They will also be **error-free**.
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  uuid: b717f38c-ab25-4a0b-9c4e-507ef522df17
- question: What are `stream` sockets used for?
  answer: |
    Stream sockets are used for applications that require the **reliable**, **sequenced**, and **error-free** transmission of data. These are crucial characteristics for various network applications such as **Telnet** (allows users to log into remote applications; largly replaced by SSH), **SSH** (Secure Shell), and **web browsers** using **HTTP** (Hypertext Transfer Protocol). These applications depend on stream sockets to ensure that data, such as typed characters or web page requests, is transmitted in the exact order it was sent and without errors. This is achieved using the `Transmission Control Protocol` (`TCP`), which is a key part of the TCP/IP suite responsible for managing data integrity.
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  uuid: 5b7b2006-b9f5-478e-b84e-9735c97fc2ca
- term: What are `datagram` sockets?
  definition: |
    Datagram sockets are an implementation of socket communication that use IP for routing, but they use the `User Datagram Protocol` (`UDP`) instead of TCP (Transmission Control Protocol).

    **If you send a datagram, it may (or may not) arrive. Each packet may arrive out of order. If it arrives, the data within the packet will be error-free.**

    Unlike TCP, **UDP** is a **connectionless** protocol that does not establish a persistent connection between endpoints before data is sent. Datagram sockthat **each packet (or datagram) is sent independently** and may follow different paths to reach its destination. Each datagram **carries its own address information**, allowing it to be routed independently across the network.
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  uuid: f217cb56-f9c0-459f-b476-1e41a6ef71c7
- question: What are `datagram` sockets used for?
  answer: |
    UDP and datagram sockets are **preferred in scenarios where the overhead of establishing a connection would impede performance**. They are commonly used in applications like **streaming media** (audio and video), **online multiplayer games**, **voice over IP** (VoIP), and other **real-time** services. The protocol is also useful in environments where a lightweight or quick communication method is needed, even at the cost of potential packet loss.
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  uuid: 3f528a87-3581-426c-bfdf-bcc92a7af59a
- question: What is the benefit of UDP vs TCP?
  answer: |
    UDP is **faster** and has **lower overhead** than TCP because it **lacks the error-checking and sequencing functionalities that ensure packets are delivered in order and without errors**.
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  uuid: 7dc92009-154b-4c21-8a36-6a9af5b51c77
- question: How do applications that use UDP, like **TFTP**, ensure data isn't lost?
  answer: |
    While UDP itself does not provide mechanisms for handling lost packets or ensuring order and reliability, higher-level protocols or application-layer implementations can add these features. For example, TFTP (Trivial File Transfer Protocol) uses UDP but adds a simple control mechanism whereby the receiver must send an acknowledgment (ACK) for each received packet. If the sender does not receive an ACK within a certain time frame, it will retransmit the packet. This ensures reliability in the delivery of files, even over a connectionless and potentially unreliable network layer.
  reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1

  uuid: b30277a9-5cb7-431c-81a8-869a9f73a85e
- term: What is `Data Encapsulation`?
  definition: |
    **Data Encapsulation** is the process of wrapping data in headers and sometimes footers by various protocols as it moves through the network layers. Each layer adds its own header information to the data, and upon reaching the destination, the headers are successively removed to reveal the original data.
  reference: https://beej.us/guide/bgnet/html/#low-level-nonsense-and-network-theory; chapter 2.2
  uuid: 97713716-793c-4fbb-a5c8-189fa0f3df6d
- term: What is the `Layered Network Model` (ISO/OSI)?
  definition: |
    The **Layered Network Model** (ISO/OSI) is a system that describes network functionality in a hierarchical manner with distinct layers, each responsible for specific functions. This model allows for the separation of concerns and abstraction of network details, enabling easier development and maintenance of network applications.
  reference: https://beej.us/guide/bgnet/html/#low-level-nonsense-and-network-theory; chapter 2.2
  uuid: 4dbe83b4-5775-4dd0-8ab1-203a37a17081
- question: What are the layers of the `Layered Network Model` (ISO/OSI)?
  answer: |
    The layers of the **Layered Network Model** (ISO/OSI) are:
    - Application
    - Presentation
    - Session
    - Transport
    - Network
    - Data Link
    - Physical
  reference: https://beej.us/guide/bgnet/html/#low-level-nonsense-and-network-theory; chapter 2.2
  uuid: 0ddb0dd9-2540-4907-b015-1a5c10f405e2
- term: What is the `Host-to-Host Transport Layer` responsible for?
  definition: |
    The **Host-to-Host Transport Layer** is responsible for ensuring reliable data transmission between hosts using protocols like **TCP** (Transmission Control Protocol) and **UDP** (User Datagram Protocol).
  reference: https://beej.us/guide/bgnet/html/#low-level-nonsense-and-network-theory; chapter 2.2
  uuid: 2021b6a6-a506-473f-9212-42e51f357387
- term: What is the `Internet Layer` responsible for?
  definition: |
    The **Internet Layer** is responsible for **IP** (Internet Protocol) addressing and routing packets across different networks.
  reference: https://beej.us/guide/bgnet/html/#low-level-nonsense-and-network-theory; chapter 2.2
  uuid: d682e7a0-a4a4-401b-adec-a6ff544a54cf
- term: What is the `Network Access Layer` responsible for?
  definition: |
    The **Network Access Layer** is responsible for **Ethernet**, **Wi-Fi**, or other hardware-specific protocols for transmitting data over the physical network.
  reference: https://beej.us/guide/bgnet/html/#low-level-nonsense-and-network-theory; chapter 2.2
  uuid: 8c35e46a-d5a4-4a9d-a2cf-eef75401518c
