Create notes for the text below. The notes will be used to study for an exam. It must contain all of the important information and details.
                
Here are the instructions, it is critical they are followed:
    - The notes must be returned in yaml format.
    - There are several types of notes (and corresponding yaml formats):
        - a note which contains `term` and `definition` properities
        - a note which contains `question` and `answer` properties
    - if a reference is provided by the user, include that as an additional attribute in the yaml
    - Use markdown formatting to format terms, important concepts, etc. accordingly.
    - Please explain things that weren't clearly explained in the text or provide definitions of terms that may not be recognized by most of the audience.
    - The response should contain only yaml, no other text or explanations.

Here is an example of the notes that should be generated for the following text:
                
Text: 

```
Reference: https://beej.us/guide/bgnet/html/#what-is-a-socket

2 What is a socket?

You hear talk of “sockets” all the time, and perhaps you are wondering just what they are exactly. Well, they’re this: a way to speak to other programs using standard Unix file descriptors.

What?

Ok—you may have heard some Unix hacker state, “Jeez, everything in Unix is a file!” What that person may have been talking about is the fact that when Unix programs do any sort of I/O, they do it by reading or writing to a file descriptor. A file descriptor is simply an integer associated with an open file. But (and here’s the catch), that file can be a network connection, a FIFO, a pipe, a terminal, a real on-the-disk file, or just about anything else. Everything in Unix is a file! So when you want to communicate with another program over the Internet you’re gonna do it through a file descriptor, you’d better believe it.

“Where do I get this file descriptor for network communication, Mr. Smarty-Pants?” is probably the last question on your mind right now, but I’m going to answer it anyway: You make a call to the socket() system routine. It returns the socket descriptor, and you communicate through it using the specialized send() and recv() (man send, man recv) socket calls.

“But, hey!” you might be exclaiming right about now. “If it’s a file descriptor, why in the name of Neptune can’t I just use the normal read() and write() calls to communicate through the socket?” The short answer is, “You can!” The longer answer is, “You can, but send() and recv() offer much greater control over your data transmission.”

What next? How about this: there are all kinds of sockets. There are DARPA Internet addresses (Internet Sockets), path names on a local node (Unix Sockets), CCITT X.25 addresses (X.25 Sockets that you can safely ignore), and probably many others depending on which Unix flavor you run. This document deals only with the first: Internet Sockets.

2.1 Two Types of Internet Sockets

What’s this? There are two types of Internet sockets? Yes. Well, no. I’m lying. There are more, but I didn’t want to scare you. I’m only going to talk about two types here. Except for this sentence, where I’m going to tell you that “Raw Sockets” are also very powerful and you should look them up.

All right, already. What are the two types? One is “Stream Sockets”; the other is “Datagram Sockets”, which may hereafter be referred to as “SOCK_STREAM” and “SOCK_DGRAM”, respectively. Datagram sockets are sometimes called “connectionless sockets”. (Though they can be connect()’d if you really want. See connect(), below.)

Stream sockets are reliable two-way connected communication streams. If you output two items into the socket in the order “1, 2”, they will arrive in the order “1, 2” at the opposite end. They will also be error-free. I’m so certain, in fact, they will be error-free, that I’m just going to put my fingers in my ears and chant la la la la if anyone tries to claim otherwise.

What uses stream sockets? Well, you may have heard of the telnet or ssh applications, yes? They use stream sockets. All the characters you type need to arrive in the same order you type them, right? Also, web browsers use the Hypertext Transfer Protocol (HTTP) which uses stream sockets to get pages. Indeed, if you telnet to a web site on port 80, and type “GET / HTTP/1.0” and hit RETURN twice, it’ll dump the HTML back at you!

If you don’t have telnet installed and don’t want to install it, or your telnet is being picky about connecting to clients, the guide comes with a telnet-like program called telnot7. This should work well for all the needs of the guide. (Note that telnet is actually a spec’d networking protocol8, and telnot doesn’t implement this protocol at all.)

How do stream sockets achieve this high level of data transmission quality? They use a protocol called “The Transmission Control Protocol”, otherwise known as “TCP” (see RFC 7939 for extremely detailed info on TCP). TCP makes sure your data arrives sequentially and error-free. You may have heard “TCP” before as the better half of “TCP/IP” where “IP” stands for “Internet Protocol” (see RFC 79110). IP deals primarily with Internet routing and is not generally responsible for data integrity.

Cool. What about Datagram sockets? Why are they called connectionless? What is the deal, here, anyway? Why are they unreliable? Well, here are some facts: if you send a datagram, it may arrive. It may arrive out of order. If it arrives, the data within the packet will be error-free.

Datagram sockets also use IP for routing, but they don’t use TCP; they use the “User Datagram Protocol”, or “UDP” (see RFC 76811).

Why are they connectionless? Well, basically, it’s because you don’t have to maintain an open connection as you do with stream sockets. You just build a packet, slap an IP header on it with destination information, and send it out. No connection needed. They are generally used either when a TCP stack is unavailable or when a few dropped packets here and there don’t mean the end of the Universe. Sample applications: tftp (trivial file transfer protocol, a little brother to FTP), dhcpcd (a DHCP client), multiplayer games, streaming audio, video conferencing, etc.

“Wait a minute! tftp and dhcpcd are used to transfer binary applications from one host to another! Data can’t be lost if you expect the application to work when it arrives! What kind of dark magic is this?”

Well, my human friend, tftp and similar programs have their own protocol on top of UDP. For example, the tftp protocol says that for each packet that gets sent, the recipient has to send back a packet that says, “I got it!” (an “ACK” packet). If the sender of the original packet gets no reply in, say, five seconds, he’ll re-transmit the packet until he finally gets an ACK. This acknowledgment procedure is very important when implementing reliable SOCK_DGRAM applications.

For unreliable applications like games, audio, or video, you just ignore the dropped packets, or perhaps try to cleverly compensate for them. (Quake players will know the manifestation this effect by the technical term: accursed lag. The word “accursed”, in this case, represents any extremely profane utterance.)

Why would you use an unreliable underlying protocol? Two reasons: speed and speed. It’s way faster to fire-and-forget than it is to keep track of what has arrived safely and make sure it’s in order and all that. If you’re sending chat messages, TCP is great; if you’re sending 40 positional updates per second of the players in the world, maybe it doesn’t matter so much if one or two get dropped, and UDP is a good choice.
```

Notes:

```
notes:
  - term: What is a `socket`?
    definition: A **way to speak to other programs** using standard Unix **file descriptors**.
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2
  - term: What is a `file descriptor`?
    definition: |
      An **integer** associated with an **open file**.
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2
  - question: What are file descriptors used for and what types of things can be file descriptors?
    answer: |
      When Unix programs do any sort of **I/O**, they do it by reading or writing to a **file descriptor**. That file can be a **network connection**, a **FIFO**, a **pipe**, a **terminal**, a real on-the-disk **file**, or just about anything else. Everything in Unix is a file.
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2
  - question: What are the two types of sockets?
    answer: |
      One is `Stream` Sockets; the other is `Datagram` Sockets, which may hereafter be referred to as `SOCK_STREAM` and `SOCK_DGRAM`, respectively.
      
      **Datagram** sockets are sometimes called **connectionless sockets**. (Though they can be `connect()`’d if you really want.)
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  - term: What are `stream` sockets?
    definition: |
      Stream sockets are **reliable** **two-way** **connected communication streams**. If you output two items into the socket in the order “1, 2”, they will arrive in the order “1, 2” at the opposite end. They will also be **error-free**.
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  - question: What are `stream` sockets used for?
    answer: |
      Stream sockets are used for applications that require the **reliable**, **sequenced**, and **error-free** transmission of data. These are crucial characteristics for various network applications such as **Telnet** (allows users to log into remote applications; largly replaced by SSH), **SSH** (Secure Shell), and **web browsers** using **HTTP** (Hypertext Transfer Protocol). These applications depend on stream sockets to ensure that data, such as typed characters or web page requests, is transmitted in the exact order it was sent and without errors. This is achieved using the `Transmission Control Protocol` (`TCP`), which is a key part of the TCP/IP suite responsible for managing data integrity and providing a reliable communication channel over the network.
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  - term: What are `datagram` sockets?
    definition: |
      Datagram sockets are an implementation of socket communication that use IP for routing, but they use the `User Datagram Protocol` (`UDP`) instead of TCP (Transmission Control Protocol).
      
      **If you send a datagram, it may (or may not) arrive. Each packet may arrive out of order. If it arrives, the data within the packet will be error-free.**
      
      Unlike TCP, **UDP** is a **connectionless** protocol that does not establish a persistent connection between endpoints before data is sent. Datagram sockets **do not require a connection** to be established before data is sent. This means that **each packet (or datagram) is sent independently** and may follow different paths to reach its destination. Each datagram **carries its own address information**, allowing it to be routed independently across the network.
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  - question: What are `datagram` sockets used for?
    answer: |
      UDP and datagram sockets are **preferred in scenarios where the overhead of establishing a connection would impede performance**. They are commonly used in applications like **streaming media** (audio and video), **online multiplayer games**, **voice over IP** (VoIP), and other **real-time** services. The protocol is also useful in environments where a lightweight or quick communication method is needed, even at the cost of potential packet loss.
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  - question: What is the benefit of UDP vs TCP?
    answer: |
      UDP is **faster** and has **lower overhead** than TCP because it **lacks the error-checking and sequencing functionalities that ensure packets are delivered in order and without errors**.
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
  - question: How do applications that use UDP, like **TFTP**, ensure data isn't lost?
    answer: |
      While UDP itself does not provide mechanisms for handling lost packets or ensuring order and reliability, higher-level protocols or application-layer implementations can add these features. For example, TFTP (Trivial File Transfer Protocol) uses UDP but adds a simple control mechanism whereby the receiver must send an acknowledgment (ACK) for each received packet. If the sender does not receive an ACK within a certain time frame, it will retransmit the packet. This ensures reliability in the delivery of files, even over a connectionless and potentially unreliable network layer.
    reference: https://beej.us/guide/bgnet/html/#what-is-a-socket; chapter 2.1
```

Here is the text to generate notes from:


```
{{reference}}

{{text}}
```
